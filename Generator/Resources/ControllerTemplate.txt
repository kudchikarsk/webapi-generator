{{func parse_data_type
   case $0
      when "Int32"
          ret "int"
      when "Int64"
          ret "long"
	  when "String"
          ret "string"
      else
          ret $0
    end
end}}
using AutoMapper;
using Microsoft.AspNet.Identity;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using WebApplication.Interfaces;
using WebApplication.Models;

namespace WebApplication.Controllers
{

	[Authorize]
    public class {{ entity_name }}Controller : ApiController
    {
        protected readonly IRepository<{{ entity_name }}> repository;
        protected readonly Mapper mapper;
		private string includes = "{{for property in nav_properties }}{{property.name}},{{end}}";

        public {{ entity_name }}Controller(
            IRepository<{{ entity_name }}> repository, 
            Mapper mapper
            )
        {
            this.repository = repository;
            this.mapper = mapper;
           
        }


        
        public virtual async Task<IHttpActionResult> Get(int? page = null,
   int pageSize = 10, string orderBy = "Id", bool ascending = false, string query = null)
        {

			var likeExpression = string.Format("%{0}%", query);
			Expression<Func<{{ entity_name }}, bool>> filter = e=>
			(query == null || query == "null"
			{{for property in properties}}
				{{ if property.type =="String" }}
					|| DbFunctions.Like(e.{{property.name}},likeExpression)			
				{{ end }}	
			{{end}}
			);
            var result = await repository.CreatePagedResults
            (
			filter, 
			page.Value, 
			pageSize, 
			orderBy, 
			ascending, 
			query
			);

            var mod = result.TotalNumberOfRecords % pageSize;
            var totalPageCount = (result.TotalNumberOfRecords / pageSize) + (mod == 0 ? 0 : 1);

            var nextPageUrl =
            page == totalPageCount
                ? null
                : Url?.Link("DefaultApi", new
                {
                    page = page + 1,
                    pageSize,
                    orderBy,
                    ascending,
                    query
                });

            var pagedResult = new PagedResults<Compact{{ entity_name }}>
            {
                Results = mapper.Map<List<Compact{{ entity_name }}>>(result.Results),
                PageNumber = page.Value,
                PageSize = pageSize,
                ResultCount = result.Results.Count,
                TotalNumberOfPages = totalPageCount,
                TotalNumberOfRecords = result.TotalNumberOfRecords,
                NextPageUrl = nextPageUrl
            };

            return Ok(pagedResult);
        }
        
        [HttpGet]
        public virtual IHttpActionResult GetSuggestions(string searchTerm)
        {
			var likeExpression = string.Format("%{0}%", searchTerm);
            Expression<Func<{{ entity_name }}, bool>> searchExpression = e=>
			(searchTerm == null || searchTerm == "null"
			{{for property in properties}}
				{{ if property.type =="String" }}
					|| DbFunctions.Like(e.{{property.name}},likeExpression)			
				{{ end }}
			{{end}}
			);

            var employees = repository.Get(searchExpression).Take(20).ToList();
            var employeesVM = mapper.Map<List<Compact{{ entity_name }}>>(employees);
            return Ok<IEnumerable<Compact{{ entity_name }}>>(employeesVM);
        }
        
        public virtual IHttpActionResult Get({{key_data_type | parse_data_type}} id)
        {
            var model = repository.Get(e => e.Id == id, includeProperties: includes).SingleOrDefault();
            var dto = mapper.Map<Get{{ entity_name }}>(model);
            return Ok<Get{{ entity_name }}>(dto);
        }

        
        public virtual IHttpActionResult Post([FromBody]Create{{ entity_name }} value)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            {{ entity_name }} model;
            try
            {
                {{ if is_user_entity }}
					model = {{ entity_name }}.Create(value,User.Identity.GetUserId());
				{{ else }}
					model = {{ entity_name }}.Create(value);
				{{ end }}
            }
            catch (Exception e)
            {
                return BadRequest(e.ToString());
            }

            repository.Insert(model);
            var dto = mapper.Map<Get{{ entity_name }}>(model);
            return Created(nameof({{ entity_name }})+"/"+ dto.Id, dto);
        }
        

        public virtual IHttpActionResult Put({{key_data_type | parse_data_type}} id, [FromBody]Update{{ entity_name }} value)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            {{ entity_name }} model = repository.GetByID(id);
         
            try
            {
                {{ if is_user_entity }}
					model.Update(value,User.Identity.GetUserId());
				{{ else }}
					model.Update(value);
				{{ end }}
            }
            catch (Exception e)
            {
                return BadRequest(e.Message);
            }

            repository.Update(model);
            return Content(HttpStatusCode.NoContent, "");
        }

        
        public virtual IHttpActionResult Delete({{key_data_type | parse_data_type}} id)
        {
            var model = repository.GetByID(id);            
            if (model == null) return NotFound();
            repository.Delete(model);
            return Content(HttpStatusCode.NoContent, "");
        }

        
    }

}
